# 必读！！！
# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 跑裸核用户请自行去掉下方控制面板模块的注释。
# 机场订阅
proxy-providers:
  fac:
    url: "https://fm-sub-mainpanel-vygijfogpm.cn-shanghai.fcapp.run/api/v1/client/subscribe?token=6a7d6a4ac72fb3d641b831132d9cdd3f"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: ♻️ 节点更新
  kugou:
    url: "https://www22.kugou2.cloud/api/v1/zh-cn/download?token=6d78849b62b6a9c34668fdfd81ca3d25"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: ♻️ 节点更新
  flowcast:
    url: "https://s1.sdh1yhd1flowcast.site/api/v1/client/subscribe?token=6794b9432be957ed350c4e4dd82103c6"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: ♻️ 节点更新
  mojie:
    url: "https://msub.xn--bwwx30f.top/api/v1/client/subscribe?token=405da5a26292299c96734ec38a841662"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: ♻️ 节点更新
  wjkc:
    url: "https://wjkc66.vip/api/subscript/clash/6877d623441041711bf42a14/cf205271-b448-4de1-bd2c-56c757b6079a"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: ♻️ 节点更新

# 节点信息
proxies:
  - {name: 直连, type: direct}

# 全局配置 
# port: 7890 # HTTP/HTTPS 代理端口，供浏览器或支持 HTTP 代理的程序使用
# socks-port: 7891 # SOCKS5 代理端口，适用于支持 SOCKS 协议的程序（如 Telegram、某些下载工具等）
# redir-port: 7892 # linux 系统的透明代理端口，用于将流量重定向tcp流量
mixed-port: 7890 # 同时支持 HTTP、HTTPS 和 SOCKS5 的端口，供不支持 SOCKS5 的程序使用 
# tproxy-port: 7894 # linux 系统的透明代理端口，用于将流量重定向到 TPROXY 模式
allow-lan: true # 是否允许局域网设备访问代理服务
bind-address: "*" # 绑定地址，默认为所有地址（
ipv6: false # 是否启用 IPv6 支持
unified-delay: true # 是否启用统一延迟测试
tcp-concurrent: true # 是否启用 TCP 并发连接
log-level: warning # 日志级别，支持：debug, info, warning, error, fatal
find-process-mode: 'off' # 进程查找模式，off: 不查找，pid: 通过 pid 查找，name: 通过名称查找
# interface-name: en0
global-client-fingerprint: chrome # 全局客户端指纹，支持：chrome, firefox, safari, edge, ie11, ios, android
keep-alive-idle: 600 # 保持连接空闲时间，单位为秒
keep-alive-interval: 15 # 保持连接间隔时间，单位为秒
disable-keep-alive: false # 是否禁用保持连接
profile: # 配置文件路径，默认为空
  store-selected: true # 是否存储选中的代理组
  store-fake-ip: true # 是否存储 Fake IP 地址

# 控制面板，external-ui 路径如果出现报错，根据你使用的插件进行调整，比如openclash改为： /etc/openclash/run  ，裸核跑改为/etc/mihomo/run
# 因容易造成新手面板启动问题，我注释掉了，需要的自行开启
# external-controller: 0.0.0.0:11231 # 控制面板端口，供外部访问
#secret: ""
#external-ui: "/etc/nikki/run"
#external-ui-name: zashboard
#external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"
external-controller: 0.0.0.0:9096
external-ui: ui
secret: "3i!W#NKUUcoCYiqu*d3T"
#external-ui-url: "https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"

#自定义 geodata url
geox-url:
  geoip: "https://fastly.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geoip.dat"
  geosite: "https://fastly.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geosite.dat"
  mmdb: "https://fastly.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geoip.metadb"

geo-auto-update: false # 是否自动更新 geodata
geo-update-interval: 24 # 更新间隔，单位：小时


# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: false
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.market.xiaomi.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
 
# 出站策略，根据自己情况调整每个策略里分组排序，增删都可以，比如把美国自动放到第一个，比如删除香港故转，注意别漏掉表情逗号等。
# 如果相应分组没有筛选到对应的国家，请根据自己节点名字调整筛选关键字。
# 没有再使用锚点，是考虑很多新手修改难度，这样新手修改某个分组更容易些。
pr: &pr {type: select, proxies: [🔯 香港故转, 🔯 日本故转, 🔯 新加坡故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 新加坡自动, ♻️ 美国自动, ♻️ 低速自动选择,♻️ 高速自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [🔯 香港故转, 🔯 日本故转, 🔯 新加坡故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 新加坡自动, ♻️ 美国自动, ♻️ 低速自动选择,♻️ 高速自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 🍀 Google, <<: *pr}
  - {name: 🤖 ChatGPT, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 🐬 OneDrive, <<: *pr}
  - {name: 🪟 Microsoft, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
  - {name: 🎥 NETFLIX, <<: *pr}
  - {name: ✈️ Speedtest, <<: *pr}
  - {name: 🎥 emby代理, <<: *pr}
  - {name: 🎥 emby直连, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🍎 Apple, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🎯 直连, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🐟 漏网之鱼, <<: *pr}
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hongkong|hong kong"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日|jp|japan"}
  - {name: 🇸🇬 新加坡节点, type: select, include-all: true, filter: "(?i)新加坡|坡|狮城|SG|Singapore"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美|us|unitedstates|united states"}
  - {name: 🇩🇪 德国, type: select, use: [kugou,flowcast], filter: "(?i)德|德国|de|germany"}
  - {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 🔯 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: 🔯 新加坡故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(台|日|韩|深|美)).)*$"}
  - {name: 🔯 美国故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|韩|新|日)).)*$" }
  - {name: ♻️ 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: ♻️ 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: ♻️ 新加坡自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(港|台|韩|日|美)).)*$" }
  - {name: ♻️ 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  - {name: ♻️ 低速自动选择, type: url-test, use: [fac], tolerance: 20, interval: 300, filter: "^((?!(直连|最新|剩余|重置|官网|地名|套餐)).)*$"}
  - {name: ♻️ 高速自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连|最新|剩余|重置|官网|地名|套餐)).)*$"}
  - {name: ♻️ IPEL自动选择, type: url-test, include-all: true, filter: "(?=.*((?i)IEPL))^((?!(最新|剩余|重置|官网|地名|套餐)).)*$"}
  - {name: fac机场-月度, type: select, use: [fac], filter: "^((?!(最新|官网|重置|地名|套餐)).)*$"}
  - {name: kugou机场-长期, type: select, use: [kugou], filter: "^((?!(最新|重置|官网|地名|套餐)).)*$"}
  - {name: flowcast机场-长期, type: select, use: [flowcast], filter: "^((?!(最新|剩余|重置|官网|地名|套餐)).)*$"}
  - {name: 魔戒机场-长期, type: select, use: [mojie], filter: "^((?!(最新|重置|官网|地名|套餐)).)*$"}
  - {name: 网际快车机场-长期, type: select, use: [wjkc], filter: "^((?!(最新|剩余|重置|官网|地名|套餐)).)*$"}
  - {name: 🌐 全部节点, type: select, include-all: true, filter: "^((?!(最新|剩余|重置|官网|地名|套餐)).)*$"}

# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - DOMAIN-SUFFIX,themoviedb.org,♻️ 新加坡自动 # nas服务定制
  - DOMAIN-SUFFIX,tmdb.org,♻️ 新加坡自动 # nas服务定制
  - DOMAIN-SUFFIX,thetvdb.com,♻️ 新加坡自动 # nas服务定制
  - DOMAIN-KEYWORD,stashdb,🇩🇪 德国 # 
  - DOMAIN-KEYWORD,theporndb,🇩🇪 德国 #
  - DOMAIN-KEYWORD,javstash,🇩🇪 德国 #
  - RULE-SET,directlite,🎯 直连
  - RULE-SET,private_domain,🎯 直连
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,embydirect,🎥 emby直连
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,embyproxyLite,🎥 emby代理
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"} #私有域名
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/hh127/openclash-rule/refs/heads/main/meta/ProxyLite.list"} #个人定制代理组
  directlite: { <<: *class, url: "https://raw.githubusercontent.com/hh127/openclash-rule/refs/heads/main/meta/Direct.list"} #个人定制直连组 
  embydirect: { <<: *class, url: "https://raw.githubusercontent.com/hh127/openclash-rule/refs/heads/main/meta/emby-Direct.list"} #emby直连组
  embyproxyLite: { <<: *class, url: "https://raw.githubusercontent.com/hh127/openclash-rule/refs/heads/main/meta/emby-ProxyLite.list"} #emby代理组
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" } # AI相关域名
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"} # YouTube相关域名
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"} # Google相关域名
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"} # GitHub相关域名
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"} # Telegram相关域名
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"} # Netflix相关域名
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"} # OneDrive相关域名
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"} # Microsoft相关域名
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"} # Apple相关域名
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"} # Speedtest相关域名 
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"} # TikTok相关域名
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"} #  GFW相关域名
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"} # 非中国大陆地理位置域名 
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"} # 中国大陆地理位置域名
  
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"} # 中国大陆IP地址
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"} #  Google IP地址
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"} # Telegram IP地址
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"} # Netflix IP地址